Record Syntax
record_name = {fieldname1 = value1, fieldname2 = value2....fieldnameN = valueN}

List Syntax
List_name = [value1,value2,value3.....valuen]

Variable Syntax
variable_name = value
variable_name:data_type = value

1. What are the 'primitive' types?
-bool
-Char 
-string 
-float 
-int 

2. What kinds of composite types can you define, or are built in? kk
-List | arrays
-records
-Tuple
-Dictionary
-Set

3. What kinds of collections are available?
-List
-records
-Dictionary
-Set
-Tuple

4. How do you handle coercion, conversion, casting (i.e. how to you change types)? x , kk
-All values in Elm are immutable, meaning that a value cannot be modified after it is created. 
-Elm uses persistent data structures to implement its arrays, sets, and dictionaries in the standard library.

5. What do iterators and generators look like?
-The iterator in Elm follows the format of Int -> a, where Int indicates the length. In this case a is of type Iterator (type Iterator a) 
    Example:    upTil : Int -> (Int -> a) -> Iterator a 

-Generators in Elm are a type that describe how to produce random values. 
    Example: 	xGenerator: Random.Generator Int 
                xGenerator = Random.int 0 100 

6. What kinds of 'constants' and variables does the language support? 
-let
-type annotation
-literal constant
7. Does the language support immutable values? l
8. Examples of statements vs expressions (and does the language have any unique features, for example, switch expressions?) l
9. Does the language support pattern matching or any other kind of 'destructuring' sugar.
- (Yes)[https://gist.github.com/yang-wei/4f563fbf81ff843e8b1e], it supports pattern matching and destructuring. However, Elm supports much less structuring than other langagues.
10. What does imperative vs declarative summation look like? 
Imperative summation:
--Take values v1,v2,...,vn
>v1+v2+...+vn

Declarative summation:
> fn_add x1 x2 ...xn = x1+x2..xn
<function> : number -> number -> number
--Assuming the programmer is abstracted from coding the above function that adds
-- two numbers in the declarative approach they only need to call the fn_add function instead of using the (+) operator
>fn_add v1 v2 ...vn
11. What does imperative vs declarative grouping and filtering look like? j






**Elm documentation**
Elm is a functional language that compiles to JavaScript

## Strongly-Typed Or Weakly-Typed
Elm is strongly-typed. 
Eg. 'a'   : Char
    "abc" : String


## Static-Typed vs Dynamic-Typed
Elm is statically typed language.

-- Functions are declared the same way, with arguments following the function name.
add x y =
    x + y

-- Again, it is best to add type annotations.
hypotenuse : Float -> Float -> Float
hypotenuse a b =
    sqrt (a^2 + b^2)
-------------------------------------------------------------------------------------

import Queue 

main = 
  let 
      queue = Queue.fromList ["Covid", "Measles", "SARS", "H1N1"] 
      e = reverseOrder queue 4 
  in 
    List.map () e 
    
reverseOrder : Queue.Queue a -> Int -> Queue.Queue a 
reverseOrder queue n = 
  let 
      loop i q = 
          if i < n then 
              let 
                  element = Queue.pop q 
                  newQ = Queue.push element (Queue.push element q) 
              in 
                  loop (i + 1) newQ 
          else 
              q 
  in 
      loop 0 queue

-------------------------------------------------------------------------------------
