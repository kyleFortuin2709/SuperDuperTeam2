Record Syntax
record_name = {fieldname1 = value1, fieldname2 = value2....fieldnameN = valueN}

List Syntax
List_name = [value1,value2,value3.....valuen]

Variable Syntax
variable_name = value
variable_name:data_type = value

1. What are the 'primitive' types?
-bool
-Char 
-string 
-float 
-int 

2. What kinds of composite types can you define, or are built in? kk
-List
-records
-Tuple

3. What kinds of collections are available?
-List
-records
-Dictionary
-Set
-Tuple

4. How do you handle coercion, conversion, casting (i.e. how to you change types)? x , kk
5. What do iterators and generators look like? x
6. What kinds of 'constants' and variables does the language support? k
7. Does the language support immutable values? l
8. Examples of statements vs expressions (and does the language have any unique features, for example, switch expressions?) l
9. Does the language support pattern matching or any other kind of 'destructuring' sugar.k
10. What does imperative vs declarative summation look like? j
11. What does imperative vs declarative grouping and filtering look like? j






**Elm documentation**

## Strongly-Typed Or Weakly-Typed
Elm is strongly-typed. 
Eg. 'a'   : Char
    "abc" : String


## Static-Typed vs Dynamic-Typed
Elm is statically typed language.

-- Functions are declared the same way, with arguments following the function name.
add x y =
    x + y

-- Again, it is best to add type annotations.
hypotenuse : Float -> Float -> Float
hypotenuse a b =
    sqrt (a^2 + b^2)
